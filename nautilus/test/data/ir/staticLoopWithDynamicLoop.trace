NESIR {
execute() {
Block_0($1:i32):
    $2 = 0 :i32
    $3 = 0 :i32
    br Block_9($2, $3, $1) :void

Block_9($2:i32, $3:i32, $1:i32):
    $4 = $3 < $1 :bool
    if $4 ? Block_1($1, $3, $2) : Block_2($2) :void

Block_1($1:i32, $3:i32, $2:i32):
    $6 = 5 :i32
    $7 = $3 > $6 :bool
    if $7 ? Block_3($1, $3, $2) : Block_4($1, $3, $2) :void

Block_3($1:i32, $3:i32, $2:i32):
    $9 = 1 :i32
    $10 = $2 + $9 :i32
    $11 = 10 :i32
    br Block_10($1, $3, $10, $11) :void

Block_10($1:i32, $3:i32, $2:i32, $11:i32):
    $12 = $2 + $11 :i32
    $13 = 5 :i32
    $14 = $3 > $13 :bool
    if $14 ? Block_5($1, $3, $12) : Block_6($1, $3, $12) :void

Block_5($1:i32, $3:i32, $2:i32):
    $16 = 1 :i32
    $17 = $2 + $16 :i32
    $18 = 10 :i32
    br Block_11($1, $3, $17, $18) :void

Block_11($1:i32, $3:i32, $2:i32, $18:i32):
    $19 = $2 + $18 :i32
    $20 = 5 :i32
    $21 = $3 > $20 :bool
    if $21 ? Block_7($1, $3, $19) : Block_8($1, $3, $19) :void

Block_7($1:i32, $3:i32, $2:i32):
    $23 = 1 :i32
    $24 = $2 + $23 :i32
    $25 = 10 :i32
    br Block_12($1, $3, $24, $25) :void

Block_12($1:i32, $3:i32, $2:i32, $25:i32):
    $26 = $2 + $25 :i32
    $27 = 1 :i32
    $28 = $3 + $27 :i32
    br Block_9($26, $28, $1) :void

Block_8($1:i32, $3:i32, $2:i32):
    $35 = 10 :i32
    br Block_12($1, $3, $2, $35) :void

Block_6($1:i32, $3:i32, $2:i32):
    $33 = 10 :i32
    br Block_11($1, $3, $2, $33) :void

Block_4($1:i32, $3:i32, $2:i32):
    $31 = 10 :i32
    br Block_10($1, $3, $2, $31) :void

Block_2($2:i32):
    return ($2) :i32
}
} //NESIR